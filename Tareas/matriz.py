# -*- coding: utf-8 -*-
"""Tarea_IA_Piciosa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nWvO_ulCzYfJL3BuCsE7Tqdql-Du8xGI
"""

# Ejercicio:
# Implemente los métodos de la clase Matriz para que funciones de acuerdo a
# lo que indican sus cadena de documentación.
#
# Antes de subir su ejercicio al campus virtual compruebe su correctiud
# en el siguiente enlace:
#   https://rp-autograder.herokuapp.com/
#
# Para la entrega suba este archivo con el mismo nombre que tiene: "matriz.py"
# No lo comprima ni lo coloque dentro de un directorio.
#
# PD: El texto después del caracter '#' en Python es un comentario.
# La palabra 'pass' puede borrarla cuando haya puesto código al método.


class Matriz:

    # Matriz([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])
    def __init__(self, elementos):
        """Inicializa una matriz bidimensional recibe una lista de listas con los
        elementos.
        Lanza una excepción de tipo TypeError en los siguientes casos:
          - Si elementos no es una lista.
          - Si los elementos dentro de los elementos no son listas.
          - Si los elementos dentro de las listas no son enteros o flotantes.
        Lanza una excepción de tipo ValueError si alguna de las listas internas
        tiene tamaño diferente al resto.
        """
        if not isinstance(elementos, list):
            raise TypeError("La variable 'elementos' debe ser del tipo lista")

        tamaño_listas = []

        for elemento in elementos:

            if not isinstance(elemento, list):
                raise TypeError("La variable 'elementos' debe contener listas")

            for valor in elemento:
                if not isinstance(valor, (int, float)):
                    raise TypeError(
                        "Los elementos de las listas de la matriz deben ser únicamente enteros y flotantes")

            tamaño_listas.append(len(elemento))

        # Opcion 1 --> comparar_listas
        # if not self.comparar_listas(tamaño_listas):

        # Opcion 2 --> all
        largo = tamaño_listas[0]
        if not all(lista == largo for lista in tamaño_listas[1:]):

            raise ValueError(
                "Las listas de la matriz deben tener el mismo tamaño")

        self.matriz = elementos

    def comparar_listas(self, lista):
        indice = len(lista)-1
        while(indice != 0):
            if lista[indice] == lista[indice - 1]:
                pass
            else:
                return False
            indice -= 1
        return True

    def sumar(self, matriz):
        """Retorna la suma de la matriz actual con el parámetro <matriz>
        Lanza una excepción de tipo TypeError en caso de que <matriz> no sea de 
        tipo Matriz.
        Lanza una excepción de tipo ValueError en caso de que <matriz> no tenga
        las mismas dimensiones que la matriz actual.
        """
        if not isinstance(matriz, Matriz):
            raise TypeError("la variable 'matriz' debe ser del tipo 'Matriz'")

        if self.dimensiones() != matriz.dimensiones():
            raise ValueError(
                "Las matrices deben tener el mismo tamaño para poder sumarlas")

        # Opción 1 !!! v0.7
        # suma_matriz = list(map(lambda x,y: x+y, self.elementos(), matriz.elementos()))

        # Opción 2
        suma_matriz = []

        for i in range(len(self.elementos())):
            suma_matriz.append([])
            for j in range(len(self.elementos()[0])):
                suma_matriz[i].append(
                    self.elementos()[i][j] + matriz.elementos()[i][j])

        return Matriz(suma_matriz)

    def dimensiones(self):
        """Retorna una tupla con las dimensiones de la matriz (n,m).
        Donde <n> es el número de filas y <m> el número de columnas.
        """
        n = len(self.matriz)
        largos = [len(n) for n in self.matriz]
        m = largos[0]

        return (n, m)

    def elementos(self):
        """Retorna una lista de listas con los elementos de la matriz"""
        return self.matriz

    def __str__(self):
        """Método especial de python debe retornar la matriz como str.
        Ej.: [[1,2],[3,4]]
        """
        return str(self.elementos())


## Ejemplo de uso ##

m1 = Matriz([[1, 2, 3], [4, 5, 6]])

m2 = Matriz([[1, 1, 1], [1, 1, 1]])
print(m1)
print(m2)
m3 = m1.sumar(m2)
print(m3)  # Debería de imprimir [[2, 3, 4],[5, 6, 7]]
